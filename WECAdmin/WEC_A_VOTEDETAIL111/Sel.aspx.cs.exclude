using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using AgileFrame.Core;
using AgileFrame.Orm.PersistenceLayer.Model;
using AgileFrame.Orm.PersistenceLayer.BLL;
using AgileFrame.Orm.PersistenceLayer.BLL.Base;
using AgileFrame.AppInOne.Common;
using AgileFrame.AppInOne.SYS;
using AgileFrame.Orm.TemplateEngine;
using System.Text;
using AgileFrame.Common;

public partial class Sel : BaseAdminPage
{
    #region 模板集
    string Finder = @"<!--Switch-->
                    <!--Case InputString-->
                       <input name='{字段控件名}' id='{字段控件名}' type='text' value='{字段值}' ck='{len:{字段标签长度},type:{字段js类型枚举}}' />
                    <!--Case SmallText-->
                    <input name='{字段控件名}' id='{字段控件名}' type='text' value='{字段值}' />
                    <!--Case Text-->
                    <input name='{字段控件名}' id='{字段控件名}' type='text' value='{字段值}' />
                    <!--Case SelectDrop--><!--Case SelectDrop-->
                    <select name='{字段控件名}' id='{字段控件名}'>
                        {字段值}
                    </select>
                    <!--Case Select_RelationFK--><!--Case Select_RelationUser-->
                    <input name='{字段控件名}' id='{字段控件名}' type='hidden'  value='{字段值}' />
                    <input name='{字段控件名}_NAME' id='{字段控件名}_NAME' value='{字段显示值}' class='selshowinput' readonly='readonly' style='width:70%;float:left;' type='text' />
                    <input class='sel' type='button' onclick='sel(this,""{首字母大写关联表名}"");' value='' style='float:left;' />    
                    <!--Case CheckBoxList-->
                    <input name='{字段控件名}' id='{字段控件名}' type='checkbox' value='{字段值}' class='ckb' />
                    <!--Case RadioBoxList-->
                    <input name='{字段控件名}' id='{字段控件名}' type='radio' value='{字段值}' class='ckb' />
                    <!--Case InputDateTime-->
                    <input name='{字段控件名}' id='{字段控件名}' type='text' readonly='readonly' onclick='setday(this)' value='{字段值}' />
                    <!--Case InputDate-->
                    <input name='{字段控件名}' id='{字段控件名}' type='text' readonly='readonly' onclick='setday(this)' value='{字段值}' />
                    <!--Case FileUpUpDoc-->
                    <input name='{字段控件名}' id='{字段控件名}' type='text' value='{字段值}' />
                    <!--Case InputPassWord--> 
                    <input name='{字段控件名}' id='{字段控件名}' type='password' value='{字段值}'>
                <!--EndSwitch-->";

    #endregion 模板集
    /// <summary>
    /// 查找html
    /// </summary>
    /// <returns></returns>
    protected string getFinder()
    {
        StringBuilder sb = new StringBuilder();
        try
        {
            foreach (DataBaseField f1 in valObj.af_GetAvailableDataBaseField())
            {
                bool isNull1 = finderObj.IsNotNull();
                bool isInit1 = false;
                //条件对象有赋值
                if (isNull1)
                {
                    AttributeItem attr1 = new AttributeItem(f1);
                    isInit1 = finderObj.GetInitialized(attr1);
                    if (isInit1)
                        f1.Value = Convert.ToString(finderObj.GetValue(attr1));
                }

                string attrHtml = Finder;

                BuildByTag b1 = new BuildByTag(BuildType.ForHtmlValue);
                b1.ParseForSwitch标签(ref attrHtml, f1);

                if (isChaZhao(f1))
                {
                    attrHtml = attrHtml.Replace("{字段显示值}", Convert.ToString(finderObj.GetValue(f1.TableName, f1.Desc.FieldCtrlName + "_NAME")));
                }

                if (isNull1 && isInit1)
                    f1.Value = "";
                sb.Append("<dl><dt>").Append(f1.Desc.ZhName).Append("：</dt><!--").Append(f1.FieldName)
                    .Append("--><dd><span>");
                sb.Append(attrHtml);
                sb.Append("</span></dd></dl>");

            }
        }
        catch (Exception ex)
        {
            Cs.Error("34" + ex.ToString());
        }
        return sb.ToString();
    }
    protected string getFinderBtn()
    {
        return "";
    }
    protected string getRepeateTitle()
    {
        return "";
    }
    protected string getRepeateHtml()
    {
        return "";
    }
    protected string showLeftLinks(string path, string pname,int rowIndex)
    {   
        if (litPathLink.Text == "")
        {
            litPathLink.Text = CommonHelper.GetPathLinks("WEC_A_VOTEDETAILManage.aspx", pid, path, pname);
        }
        int numStr = aspPager.PageSize * (aspPager.CurrentPageIndex - 1) + rowIndex+1;
        return "<b>" + numStr + "</b>" +CommonHelper.ShowLinkByPath("WEC_A_VOTEDETAILManage.aspx", path);
    }
    protected string pid = "0";
    #region 模板方法
    protected ITableImplement getValObj()
    {
        if (!string.IsNullOrEmpty(ModuleName) && this.valObj111 != null)
        {
            return valObj111;
        }
        return valObj;
    }
    protected List<ITableImplement> getCondObj()
    {
        List<ITableImplement> condList = new List<ITableImplement>();
        if (!string.IsNullOrEmpty(ModuleName) && this.condObj111 != null)
        {
            condList.Add(condObj111);
        }else
            condList.Add(condObj);
        return condList;
    }
    protected List<ITableImplement> getListObj()
    {
        List<ITableImplement> list1 = new List<ITableImplement>();
        if (!string.IsNullOrEmpty(ModuleName))
        {
            return listObj111;
        }
        else
        { 
            foreach (WEC_A_VOTEDETAIL itable in listObj)
            {
                list1.Add(itable);
            }
        }
        return list1;
    }
    #endregion 模板方法

    WEC_A_VOTEDETAIL valObj = new WEC_A_VOTEDETAIL();
    WEC_A_VOTEDETAIL condObj = new WEC_A_VOTEDETAIL();
    protected WEC_A_VOTEDETAIL finderObj = new WEC_A_VOTEDETAIL();
    protected List<WEC_A_VOTEDETAIL> listObj = new List<WEC_A_VOTEDETAIL>();
    int recount = -1;//查询总记录数
    protected string title = "";
    protected DataBaseField[] attrs = null;

    private void BindList(WEC_A_VOTEDETAIL condObj, int curPage)
    {
        condObj.af_PageBy(WEC_A_VOTEDETAIL.Attribute.ADDTIME, Order.Desc);
        condObj.af_PageBy(WEC_A_VOTEDETAIL.Attribute.SORT, Order.Desc);
        if (condObj.af_PageByAttributeItem == null)//如果不存在用户定义的分页排序属性，则用主键属性排序
            condObj.af_PageBy(WEC_A_VOTEDETAIL.Attribute.ID, Order.Desc);

        condObj111.af_PageBy(WEC_A_VOTEDETAIL.Attribute.ADDTIME, Order.Desc);
        condObj111.af_PageBy(WEC_A_VOTEDETAIL.Attribute.SORT, Order.Desc);
        if (condObj111.af_PageByAttributeItem == null)//如果不存在用户定义的分页排序属性，则用主键属性排序
            condObj111.af_PageBy(WEC_A_VOTEDETAIL.Attribute.ID, Order.Desc);

        #region//数据权限条件

        #endregion
        //condObj.PID = decimal.Parse(pid);

        //配置范围权限
        SetConditionByRequest(condObj);
        SetConditionByRequest(condObj111);

        //if (string.IsNullOrEmpty(ModuleName)) ModuleName = "WEC_A_VOTEDETAIL";

        //zlg 有模块，则先配置
        valObj.setConn(conn).setModule("WEC_A_VOTEDETAIL");
        //zlg 有模块，则先配置
        valObj111.setConn(conn).setModule("WEC_A_VOTEDETAIL");

        attrs = getValObj().af_GetAvailableDataBaseField();

        //测试用
        List<ITableImplement> otherValueList; List<Relation> relationList;
        valObj.GetModule(out otherValueList, out relationList);
        //zlg 有模块，则先配置 end

        List<Relation> relations = new List<Relation>();
        listObj = BLLTable<WEC_A_VOTEDETAIL>.Factory(conn).SelectByPage((getValObj()), relations, null,
    getCondObj(), aspPager.PageSize, curPage, ref recount);


        BLLTable.SQL_Test.ToArray();
        aspPager.RecordCount = recount;
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        valObj._TableName = ModuleName;//实体类
        condObj._TableName = ModuleName;

        #region//默认隐藏的列
        //hideTableColumnList = new List<AttributeItem>();
        //hideTableColumnList.Add(WEC_A_VOTEDETAIL.Attribute.EXP1);
        //hideTableColumnList.Add(WEC_A_VOTEDETAIL.Attribute.EXP2);
        //hideTableColumnList.Add(WEC_A_VOTEDETAIL.Attribute.EXP3);
        //valObj.LoadAllAttributes(true);//暂时加此代码，以后框架更新将不需要
        //valObj.Remove(hideTableColumnList);

        //hideFindColumnList = new List<AttributeItem>();
        //hideFindColumnList.Add(WEC_A_VOTEDETAIL.Attribute.EXP1);
        //hideFindColumnList.Add(WEC_A_VOTEDETAIL.Attribute.EXP2);
        //hideFindColumnList.Add(WEC_A_VOTEDETAIL.Attribute.EXP3);
        #endregion
        title = valObj._ZhName + "管理";
        Page.Title = title;
        if (Request["PID"] != null)
        {
            pid = Request["PID"];
        }
        if (!IsPostBack)
        {
            //从数据库获取配置的取值对象和条件对象，作为视图。jinsj
            Ec_View cond1 = new Ec_View();
            cond1.ModuleName = valObj._TableName;
            Ec_View v1 = BLLTable<Ec_View>.GetRowData(cond1);
            if (v1 != null && v1.IsNotNull())
            {
                if (v1.ValueJsonString != "")
                {
                    valObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(v1.ValueJsonString);
                }
                if (v1.ConditionJsonString != "")
                {
                    condObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(v1.ConditionJsonString);
                }
                string viewName = v1.ViewName;
            }
            #region//默认属性初始化
            aspPager.CurrentPageIndex = 1;
            //aspPager.ShowInputBox = AgileFrame.Core.WebSystem.WebCtrls.ShowInputBox.Auto;
            txtPageSize.Value = "30";
            aspPager.PageSize = 30;
            //if (pid == "" || pid == "0")
            //{
            //    a_top.Visible = false;
            //}
            #endregion
            #region//数据初始化

            #endregion

            BindList(condObj, 1);

        }
        if (hidCondition.Value != "")
        {
            condObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(hidCondition.Value);
        }
        if (hidFind.Value != "")
        {
            finderObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(hidFind.Value);
        }
        if (hidVal.Value != "")
        {
            valObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(hidVal.Value);
        }
        if (valObj.IsNull())
        {
            valObj.LoadAllAttributes(true);
        }
    }
    /// <summary>
    /// 获取list页的数据源  
    /// 支持主模块的链接
    /// 支持枚举量
    /// 支持时间格式
    /// </summary>
    /// <param name="f1"></param>
    /// <returns></returns>
    public string GetHtmlList(DataBaseField f1, WEC_A_VOTEDETAIL this1)
    {
        if (!f1.Desc.af_Enable) return "";//是否可用
        if (!f1.Desc.af_Visable) return "";//是否可见
        string html = "";
        string tableName = f1.TableName;
        AttributeItem attr1 = AttributeItem.Factory(f1);
        object value1 = (this1.GetValue(attr1));
        DataBaseTable dt1 = f1.DataBaseTable; //DataBaseField f1;
        //if (AgileFrame.Orm.PersistenceLayer.DAL.Base.RunTime.Factory(this1.ConnectKey).DataBase
        //    .TryGetValueAll(tableName, f1.FieldName, out dt1, out f1))
        {
            try
            {
                DataBaseField id1 = dt1.IDField;
                DataBaseField name1 = dt1.NameField;

                if (f1 == dt1.IDField)
                {
                    //html = "<a href='index.aspx?id=" + this1.GetValue(dt1.FieldID.FieldName) + "'>" + html + "</a>";
                }
                else if (f1 == dt1.NameField)// != null && dt1.NameField.FieldName == f1.FieldName)//本模块name详细链接
                {
                    html = Convert.ToString(this1.GetValue(id1));
                }
                else if (isSelect(f1))//枚举量
                {
                    html = BaseFormHelper.Factory(this1.ConnectKey).GetOptionText(attr1, value1);
                }
                else if (isChaZhao(f1))//父表
                {
                    DataBaseField f2 = f1.DataBaseTable.FatherTable_ChaZhao[0].DataBaseTable.NameField;
                    AttributeItem attr2 = AttributeItem.Factory(f2);
                    html = Convert.ToString(this1.GetValue(attr2));
                }
                else if (f1.Desc.Switch_CtrlType == BaseCtrlType.FileUpImage)
                {
                    html = "<img src ='" + value1 + "' style='height:40px' />";
                }
            }
            catch (Exception ex)
            {
                Cs.Error(ex.ToString());
            }
        }
        if (html == "")
        {
            html = Convert.ToString(value1);
        }
        return html;
    }
    private bool isSelect(DataBaseField f1)
    {
        if (f1.Desc.Switch_CtrlType == BaseCtrlType.RadioBoxList
                    || f1.Desc.Switch_CtrlType == BaseCtrlType.CheckBoxList
                    || f1.Desc.Switch_CtrlType == BaseCtrlType.SelectDrop
                    || f1.Desc.Switch_CtrlType == BaseCtrlType.SelectSingle
                    || f1.Desc.Switch_CtrlType == BaseCtrlType.SelectMultiple)
        {
            return true;
        }
        return false;
    }
    private bool isChaZhao(DataBaseField f1)
    {
        if (f1.Desc.Switch_CtrlType == BaseCtrlType.Select_RelationUser
                    || f1.Desc.Switch_CtrlType == BaseCtrlType.Select_RelationFK)//父表
        {
            return true;
        }
        return false;
    }
    protected void aspPager_PageChanged(object sender, EventArgs e)
    {
        if (hidCondition.Value != "")
        {
            condObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(hidCondition.Value);
        }
        BindList(condObj, aspPager.CurrentPageIndex);
    }
    protected bool TryGetRequest(string fieldName, out string fieldValue)
    {
        fieldValue = Request[fieldName];
        if (!string.IsNullOrEmpty(fieldValue))
        {
            return true;
        }
        return false;
    }
    protected bool TryGetRequest(DataBaseField f1, out string fieldValue)
    {
        if (TryGetRequest(f1.Desc.FieldCtrlName, out fieldValue))
        {
            if (f1.Desc.CtrlType == BaseCtrlType.SelectDrop &&
                (fieldValue == "-1" || fieldValue == ""))
                return false;

            if ((f1.Desc.CtrlType == BaseCtrlType.InputDate || f1.Desc.CtrlType == BaseCtrlType.InputDateTime) &&
                (fieldValue == "0001-01-01" || fieldValue == "1900-01-01"))
                return false;
            return true;
        }
        else if (TryGetRequest(f1.Desc.FieldName, out fieldValue))
        {
            return true;
        }
        return false;
    }

    protected void btnFind_Click(object sender, EventArgs e)
    {
        string aa = Request["txtId"];
        condObj = new WEC_A_VOTEDETAIL();
        finderObj = new WEC_A_VOTEDETAIL();
        foreach (DataBaseField f1 in valObj.af_GetAvailableDataBaseField())
        {
            string fieldValue = null;
            AttributeItem attr1 = null;
            try
            {
                if (isChaZhao(f1))
                {
                    if (TryGetRequest(f1.Desc.FieldCtrlName + "_NAME", out fieldValue))
                    {
                        attr1 = new AttributeItem(f1.TableName, f1.Desc.FieldCtrlName + "_NAME");
                        finderObj.SetValue(attr1, fieldValue);
                    }
                }
                if (TryGetRequest(f1, out fieldValue))
                {
                    attr1 = new AttributeItem(f1);
                    condObj.Like(attr1, fieldValue);
                    finderObj.SetValue(attr1, fieldValue);
                }
            }
            catch (Exception ex)
            {
                Cs.Error(ex.ToString());
                litWarn.Text = ex.Message + ":" + attr1.LongName + "=" + fieldValue;
            }
        }

        hidVal.Value = valObj.ToJson(20);
        hidCondition.Value = condObj.ToJson(20);
        hidFind.Value = finderObj.ToJson(20);

        BindList(condObj, 1);
    }

    protected void btnSetPageSize_Click(object sender, EventArgs e)
    {
        aspPager.PageSize = int.Parse(txtPageSize.Value);
        if (hidCondition.Value != "")
        {
            condObj = JsonServiceBase.FromJson<WEC_A_VOTEDETAIL>(hidCondition.Value);
        }
        BindList(condObj, aspPager.CurrentPageIndex);
    }

    protected void repList_ItemDataBound(object sender, RepeaterItemEventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
           litWarn.Text = ex.Message;
        }
    }
}